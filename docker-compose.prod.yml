# Production docker-compose file - uses pre-built images
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

services:
  app:
    # Ensure we're using the production image
    image: candy0327/obsidian-publisher-server:${VERSION:-latest}
    pull_policy: always
    
    # Production environment overrides
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_PATH=/app/data/posts.db
      - CORS_ORIGIN=${CORS_ORIGIN:-https://share.141029.xyz}
    
    # Production resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    # Production restart policy
    restart: always
    
    # Stricter healthcheck for production
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').request({hostname:'localhost',port:3000,path:'/health',timeout:2000}).on('response',r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1)).end()"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  nginx:
    # Production nginx with SSL support
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./server/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ssl_certs:/etc/letsencrypt:ro
      - ssl_www:/var/www/certbot:ro
    
    # Production resource limits
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
    
    restart: always
    
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 60s
      timeout: 10s
      retries: 3

  # Production SSL certificate management
  certbot:
    image: certbot/certbot:latest
    container_name: obsidian-publisher-certbot
    volumes:
      - ssl_certs:/etc/letsencrypt
      - ssl_www:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${SSL_EMAIL:-admin@share.141029.xyz} --agree-tos --no-eff-email --keep-until-expiring -d ${DOMAIN:-share.141029.xyz}
    depends_on:
      - nginx

# Additional production volumes
volumes:
  ssl_certs:
    driver: local
  ssl_www:
    driver: local