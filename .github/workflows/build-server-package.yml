name: Build Server Package

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags (e.g., v1.0.0)
  workflow_dispatch:  # Allow manual triggering
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: false
        default: 'latest'

jobs:
  build-package:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up environment
      run: |
        # Extract version from tag or use input
        if [[ "${{ github.ref_type }}" == "tag" ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="${{ github.event.inputs.version || 'latest' }}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Building version: $VERSION"
        
    - name: Build server package
      run: |
        chmod +x build-server-package.sh
        ./build-server-package.sh
        
    - name: Rename package with version
      run: |
        cd build/
        if [[ "$VERSION" != "latest" ]]; then
          # Create versioned filename
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          VERSIONED_NAME="obsidian-publisher-server-$VERSION.zip"
          cp obsidian-publisher-server-*.zip "$VERSIONED_NAME"
          # Update latest symlink to point to versioned file
          rm -f obsidian-publisher-server-latest.zip
          ln -s "$VERSIONED_NAME" obsidian-publisher-server-latest.zip
        fi
        ls -la
        
    - name: Calculate checksums
      run: |
        cd build/
        for file in *.zip; do
          if [[ -f "$file" && ! -L "$file" ]]; then
            sha256sum "$file" > "$file.sha256"
            md5sum "$file" > "$file.md5"
          fi
        done
        ls -la
        
    - name: Create release notes
      run: |
        cd build/
        cat > RELEASE_NOTES.md << EOF
        # Obsidian Publisher Server - $VERSION
        
        ## Package Contents
        - Docker Compose configurations
        - Nginx configurations (Cloudflare, dev, simple)
        - Automated deployment script
        - Environment configuration template
        - Comprehensive installation guide
        
        ## Installation
        1. Download \`obsidian-publisher-server-$VERSION.zip\`
        2. Extract: \`unzip obsidian-publisher-server-$VERSION.zip\`
        3. Configure: \`cd obsidian-publisher-server && cp .env.example .env\`
        4. Edit \`.env\` with your domain and API token
        5. Deploy: \`./deploy.sh deploy-prod\`
        
        ## System Requirements
        - Docker 20.10+
        - Docker Compose 2.0+
        - Linux server with 1GB RAM
        - Port 80 available
        
        ## Verification
        After deployment, test the health endpoint:
        \`\`\`bash
        curl http://your-domain/health
        \`\`\`
        
        ## Package Checksums
EOF
        for file in *.zip; do
          if [[ -f "$file" && ! -L "$file" ]]; then
            echo "### $file" >> RELEASE_NOTES.md
            echo '```' >> RELEASE_NOTES.md
            echo "SHA256: $(cat $file.sha256 | cut -d' ' -f1)" >> RELEASE_NOTES.md
            echo "MD5: $(cat $file.md5 | cut -d' ' -f1)" >> RELEASE_NOTES.md
            echo '```' >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
          fi
        done
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: server-package-${{ env.VERSION }}
        path: |
          build/*.zip
          build/*.sha256
          build/*.md5
          build/RELEASE_NOTES.md
        retention-days: 90
        
    - name: Create GitHub Release
      if: github.ref_type == 'tag'
      uses: softprops/action-gh-release@v2
      with:
        name: "Obsidian Publisher Server ${{ env.VERSION }}"
        body_path: build/RELEASE_NOTES.md
        files: |
          build/*.zip
          build/*.sha256
          build/*.md5
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Summary
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: $VERSION" >> $GITHUB_STEP_SUMMARY
        echo "- **Package Size**: $(ls -lh build/*.zip | grep -v latest | awk '{print $5}')" >> $GITHUB_STEP_SUMMARY
        echo "- **Files Created**:" >> $GITHUB_STEP_SUMMARY
        cd build/
        for file in *.zip *.sha256 *.md5; do
          if [[ -f "$file" && ! -L "$file" ]]; then
            echo "  - $file" >> $GITHUB_STEP_SUMMARY
          fi
        done