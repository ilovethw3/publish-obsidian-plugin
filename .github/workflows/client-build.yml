name: Build Obsidian Plugin

on:
  # 开发构建和正式发布触发器
  push:
    # 开发构建：推送到主分支且修改了客户端相关文件
    branches:
      - master
      - main
    paths:
      - 'client/**'
      - 'shared/**'
      - '.github/workflows/client-build.yml'
    # 正式发布：推送版本标签
    tags:
      - 'v*'

  # 允许手动触发
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'client/package-lock.json'

      - name: Install dependencies
        run: |
          cd client
          npm ci

      - name: Build plugin
        run: |
          cd client
          npm run build

      - name: Get plugin info
        id: plugin-info
        run: |
          cd client
          echo "version=$(node -p "require('./manifest.json').version")" >> $GITHUB_OUTPUT
          echo "id=$(node -p "require('./manifest.json').id")" >> $GITHUB_OUTPUT
          echo "name=$(node -p "require('./manifest.json').name")" >> $GITHUB_OUTPUT

      - name: Create plugin ZIP
        run: |
          cd client
          mkdir -p ../dist
          zip -j "../dist/${{ steps.plugin-info.outputs.id }}.zip" main.js manifest.json styles.css

      - name: Upload development build
        if: github.ref_type == 'branch'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.plugin-info.outputs.id }}-${{ github.sha }}
          path: dist/${{ steps.plugin-info.outputs.id }}.zip
          retention-days: 90

      - name: Create Release
        if: github.ref_type == 'tag'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ steps.plugin-info.outputs.name }} ${{ github.ref }}
          body: |
            ## 🚀 Release ${{ github.ref }}
            
            ### 📦 Installation
            
            1. Download the `${{ steps.plugin-info.outputs.id }}.zip` file below
            2. Extract it to your Obsidian plugins folder: `.obsidian/plugins/${{ steps.plugin-info.outputs.id }}/`
            3. Reload Obsidian and enable the plugin in Community Plugins settings
            
            ### 📋 Files included:
            - `main.js` - Plugin code
            - `manifest.json` - Plugin metadata  
            - `styles.css` - Plugin styles
            
            ---
            
            **Version:** ${{ steps.plugin-info.outputs.version }}  
            **Build:** ${{ github.sha }}
          draft: false
          prerelease: false

      - name: Upload ZIP to Release
        if: github.ref_type == 'tag'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/${{ steps.plugin-info.outputs.id }}.zip
          asset_name: ${{ steps.plugin-info.outputs.id }}.zip
          asset_content_type: application/zip

      - name: Upload individual files to Release
        if: github.ref_type == 'tag'
        run: |
          cd client
          
          # Upload main.js
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/javascript" \
            --data-binary @main.js \
            "${{ steps.create_release.outputs.upload_url }}?name=main.js"
          
          # Upload manifest.json
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data-binary @manifest.json \
            "${{ steps.create_release.outputs.upload_url }}?name=manifest.json"
          
          # Upload styles.css
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: text/css" \
            --data-binary @styles.css \
            "${{ steps.create_release.outputs.upload_url }}?name=styles.css"